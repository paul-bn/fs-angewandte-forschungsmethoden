import pandas as pd import os import numpy as npimport matplotlib.pyplot as pltos.chdir("/Users/paulbenjamins/Desktop/data_afm")df = pd.read_csv("factors.csv")df = df.drop(columns=(["Unnamed: 0","HML_Europe","HML_Global","HML_US","SMB_Europe","SMB_Global","SMB_US","UMD_Europe","UMD_Global","UMD_US","D.Recession","P.Recession"]))df["RF"] = df["RF"] / 100#df.to_excel("/Users/paulbenjamins/Desktop/data_afm/factors.xlsx")#Sharpe Ratio Betrachtung , far away from finished#BAB Globalsharpe_BAB_g = df["BAB_Global"].mean() / df["BAB_Global"].std()#Mkt Globalsharpe_Mkt_g = df["Mkt_Global"].mean() / df["Mkt_Global"].std()sharpe_dif_g = sharpe_BAB_g - sharpe_Mkt_g#BAB Europesharpe_BAB_eu = df["BAB_Europe"].mean() / df["BAB_Europe"].std()#Mkt Europesharpe_Mkt_eu = df["Mkt_Europe"].mean() / df["Mkt_Europe"].std()sharpe_dif_eu = sharpe_BAB_eu - sharpe_Mkt_eu#BAB USsharpe_BAB_us = df["BAB_US"].mean() / df["BAB_US"].std()#Mkt USsharpe_Mkt_us = df["Mkt_US"].mean() / df["Mkt_US"].std()sharpe_dif_us = sharpe_BAB_us - sharpe_Mkt_us#GLOBAL#df["BAB_Global_return"] = df["BAB_Global"] + df["RF"]#df["Mkt_Global_return"] = df["Mkt_Global"] + df["RF"]df["BAB_Global_return"] = df["BAB_Global"]df["Mkt_Global_return"] = df["Mkt_Global"] + df["RF"]Global_BAB = 1 + df["BAB_Global_return"].to_frame()Global_Mkt = 1 + df["Mkt_Global_return"].to_frame()bab_cum_g = Global_BAB["BAB_Global_return"].cumprod().to_frame()mkt_cum_g = Global_Mkt["Mkt_Global_return"].cumprod().to_frame()bab_cum_g ["Mkt_Global_return"] = mkt_cum_g ["Mkt_Global_return"]bab_mkt_cum_g = bab_cum_gbab_mkt_cum_g["time"] = df["mdate"]bab_mkt_cum_g = bab_cum_g.set_index("time")plt.plot(bab_mkt_cum_g.index.astype(str), bab_mkt_cum_g[["BAB_Global_return","Mkt_Global_return"]].values, label=["BAB","Market"])plt.gca().xaxis.set_major_locator(plt.MaxNLocator(15))plt.xticks(rotation=60)plt.title("Global")plt.legend()plt.tight_layout()plt.show()#US#df["BAB_US_return"] = df["BAB_US"] + df["RF"]#df["Mkt_US_return"] = df["Mkt_US"] + df["RF"]df["BAB_US_return"] = df["BAB_US"] df["Mkt_US_return"] = df["Mkt_US"] + df["RF"]US_BAB = 1 + df["BAB_US_return"].to_frame()US_Mkt = 1 + df["Mkt_US_return"].to_frame()bab_cum_us = US_BAB["BAB_US_return"].cumprod().to_frame()mkt_cum_us = US_Mkt["Mkt_US_return"].cumprod().to_frame()bab_cum_us ["Mkt_US_return"] = mkt_cum_us ["Mkt_US_return"]bab_mkt_cum_us = bab_cum_usbab_mkt_cum_us["time"] = df["mdate"]bab_mkt_cum_us = bab_cum_us.set_index("time")plt.plot(bab_mkt_cum_us.index.astype(str), bab_mkt_cum_us[["BAB_US_return","Mkt_US_return"]].values, label=["BAB","Market"])plt.gca().xaxis.set_major_locator(plt.MaxNLocator(15))plt.xticks(rotation=60)plt.title("US")plt.legend()plt.tight_layout()plt.show()#EUROPEdf["BAB_Europe_return"] = df["BAB_Europe"]  df["Mkt_Europe_return"] = df["Mkt_Europe"] + df ["RF"]#df["BAB_Europe_return"] = df["BAB_Europe"] + df["RF"]#df["Mkt_Europe_return"] = df["Mkt_Europe"] + df["RF"]EU_BAB = 1 + df["BAB_Europe_return"].to_frame()EU_Mkt = 1 + df["Mkt_Europe_return"].to_frame()bab_cum_eu = EU_BAB["BAB_Europe_return"].cumprod().to_frame()mkt_cum_eu = EU_Mkt["Mkt_Europe_return"].cumprod().to_frame()bab_cum_eu ["Mkt_Europe_return"] = mkt_cum_eu ["Mkt_Europe_return"]bab_mkt_cum_eu = bab_cum_eubab_mkt_cum_eu["time"] = df["mdate"]bab_mkt_cum_eu = bab_cum_eu.set_index("time")plt.plot(bab_mkt_cum_eu.index.astype(str), bab_mkt_cum_eu[["BAB_Europe_return","Mkt_Europe_return"]].values, label=["BAB","Market"])plt.gca().xaxis.set_major_locator(plt.MaxNLocator(15))plt.xticks(rotation=60)plt.title("Europe")plt.legend()plt.tight_layout()plt.show()#ONLY BABplt.plot(bab_mkt_cum_eu.index.astype(str), bab_mkt_cum_eu["BAB_Europe_return"].values, label="EUROPE")plt.gca().xaxis.set_major_locator(plt.MaxNLocator(15))plt.xticks(rotation=60)plt.plot(bab_mkt_cum_us.index.astype(str), bab_mkt_cum_us["BAB_US_return"].values, label="US")plt.gca().xaxis.set_major_locator(plt.MaxNLocator(15))plt.xticks(rotation=60)plt.plot(bab_mkt_cum_g.index.astype(str), bab_mkt_cum_g["BAB_Global_return"].values, label="GLOBAL")plt.gca().xaxis.set_major_locator(plt.MaxNLocator(15))plt.xticks(rotation=60)plt.title("comparison of BAB strategies")plt.tight_layout()plt.legend()plt.show()#linear regression#Mkt_Global_return BAB_Global_returnx = df["Mkt_Global"]y = df["BAB_Global"]x.to_numpy()b,a = np.polyfit(x, y, 1)x_line = np.linspace(x.min(), x.max(), 200)y_line = a + b * x_lineplt.figure()plt.scatter(x, y, alpha=0.8)plt.plot(x_line, y_line, color="red")plt.axhline(0, linewidth=1)plt.axvline(0, linewidth=1)plt.xlabel("Market excess return")plt.ylabel("BAB excess return")plt.title(f"GLOBAL y = {a:.4f} + {b:.2f}x")plt.tight_layout()plt.show()import statsmodels.api as smX = sm.add_constant(x)model = sm.OLS(y, X).fit()model.summary()# residuals are not iid (independet and identically distributed), 12 month time lackols = sm.OLS(y, X).fit(cov_type="HAC", cov_kwds={"maxlags":12})(ols.summary())#based on 2d test statistical insignifance about the negative correlation between bab and market. we cant prove that there is a relation